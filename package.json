{
    "name": "plang-extension",
    "displayName": "plang-extension",
    "description": "Add support for plang programming language to VS Code",
    "version": "0.1.25",
    "icon": "logo.png",
    "engines": {
        "vscode": "^1.79.0"
    },
    "repository": {
        "url": "https://github.com/PLangHQ/plang.vscodeextension"
    },
    "publisher": "PlangHQ",
    "author": {
        "name": "Ingi Gauti"
    },
    "bugs": {
        "url": "https://github.com/PLangHQ/plang.vscodeextension/issues"
    },
    "homepage": "https://plang.is",
    "keywords": [
        "plang",
        "ide"
    ],
    "categories": [
        "Programming Languages",
        "Debuggers"
    ],
    "activationEvents": [
        "onLanguage:goal",
        "onDebug:goal", 
        "onView:plangWebview"
    ],
    "main": "./dist/extension.js",
    "contributes": {
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "plangInfoSidebar",
                    "title": "Plang Info",
                    "icon": "media/logo.png"
                }, 
                {
                    "id": "plangChatSidebar",
                    "title": "Plang Chat",
                    "icon": "media/logo.png"
                }
            ]
        },
        "views": {
            "plangInfoSidebar": [
                {
                    "id": "plangWebview",
                    "name": "Plang Info",
                    "icon": "media/logo.svg",
                    "type": "webview"
                }
            ],
            "plangChatSidebar" :[ {
                    "id": "plangWebviewChat",
                    "name": "Plang Chat",
                    "icon": "media/logo.svg",
                    "type": "webview"
                }
            ]
        },
        "configurationDefaults": {
            "editor.hover.sticky": true,
            "editor.hover.delay": 500
        },
        "languages": [
            {
                "id": "goal",
                "extensions": [
                    ".goal"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        
        "grammars": [
            {
                "language": "goal",
                "scopeName": "source.goal",
                "path": "./syntaxes/goal.tmLanguage.json"
            }
        ],
        "breakpoints": [
            {
                "language": "goal"
            }
        ],
        "debuggers": [
            {
                "type": "goal",
                "label": "Goal Debugger",
                "program": "./dist/extension.js",
                "runtime": "node",
                "languages": [
                    "goal"
                ]
            }
        ],
        "inputs": [
            {
                "id": "parameterName",
                "type": "promptString",
                "description": "Please enter a parameter value.",
                "default": ""
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "command": "extension.regenerateStep",
                    "group": "0_builder",
                    "when": "resourceExtname == .goal"
                },
                {
                    "command": "extension.createStepTest",
                    "group": "01_builder",
                    "when": "resourceExtname == .goal"                    
                },
                {
                    "command": "extension.runFromStep",
                    "group": "2_debugger",
                    "when": "resourceExtname == .goal && inDebugMode"
                },
                {
                    "command": "extension.runFromStepCSharpDebugger",
                    "group": "2_debugger",
                    "when": "resourceExtname == .goal && inDebugMode"
                }
            ],
            "editor/lineNumber/context": [
                {
                    "command": "extension.goToLine",
                    "group": "navigation"
                }
            ]
        },
        "commands": [
            {
                "command": "extension.goToLine",
                "title": "‚ñ∂Ô∏è Run from here", "category": "builder"
            },
            {
                "command": "extension.regenerateStep",
                "title": "üîÑ Regenerate step", "category": "builder"
            },
            {
                "command": "extension.createStepTest",
                "title": "üß™ Create test for step", "category": "tests"
            },
            {
                "command": "extension.runFromStep",
                "title": "üèÉ‚Äç‚ôÇÔ∏è Run from step"
            },
            {
                "command": "extension.runFromStepCSharpDebugger",
                "title": "üêûüèÉ‚Äç‚ôÇÔ∏è Run from step & start C# debugger"
            },
            {
                "command": "extension.startPLangDebug",
                "title": "Start PLang Debug"
            },
            {
                "command": "plang.selectLLMService",
                "title": "Select Plang LLM Service"
            }
        ],
        "keybindings": [
            {
                "command": "extension.build",
                "key": "ctrl+shift+b",
                "mac": "cmd+k",
                "when": "editorLangId == 'goal'"
            },
            {
                "command": "extension.startPLangDebug",
                "key": "f5",
                "when": "editorTextFocus && editorLangId == 'goal'"
            },
            {
                "key": "f12",
                "command": "extension.goToGoal",
                "when": "editorLangId == 'goal'"
            }
        ],
        "configuration": {
            "title": "Plang Settings",
            "properties": {
                "plang.llmservice": {
                    "type": "string",
                    "default": "plang",
                    "enum": [
                        "plang",
                        "openai"
                    ],
                    "enumDescriptions": [
                        "Uses PLang LLM service",
                        "Uses OpenAI service - You need OpenAI API key"
                    ],
                    "description": "Choose LLM service"
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run package",
        "compile": "webpack --config webpack.config.js",
        "watch": "webpack --config webpack.config.js --watch",
        "package": "webpack --mode production --devtool hidden-source-map",
        "compile-tests": "tsc -p . --outDir out",
        "watch-tests": "tsc -p . -w --outDir out",
        "pretest": "npm run compile-tests && npm run compile && npm run lint",
        "lint": "eslint src --ext ts",
        "test": "node ./out/test/runTest.js"
    },
    "devDependencies": {
        "@types/express": "^4.17.20",
        "@types/glob": "^8.1.0",
        "@types/jsonpath": "^0.2.2",
        "@types/mocha": "^10.0.1",
        "@types/node": "16.x",
        "@types/vscode": "^1.79.0",
        "@typescript-eslint/eslint-plugin": "^5.59.1",
        "@typescript-eslint/parser": "^5.59.1",
        "@vscode/debugadapter": "^1.63.0",
        "@vscode/test-electron": "^2.3.0",
        "copy-webpack-plugin": "^12.0.2",
        "eslint": "^8.39.0",
        "glob": "^8.1.0",
        "mocha": "^10.2.0",
        "ts-loader": "^9.4.2",
        "typescript": "^5.1.6",
        "webpack": "^5.81.0",
        "webpack-cli": "^5.1.4"
    },
    "dependencies": {
        "@types/chokidar": "^2.1.3",
        "@vscode/debugprotocol": "^1.63.0",
        "await-notify": "^1.0.1",
        "chokidar": "^3.5.3",
        "express": "^4.18.2",
        "jsonpath": "^1.1.1",
        "node-fetch": "^3.3.2",
        "source-map-support": "^0.5.21"
    }
}
